"""create_initial_tables_and_add_admin_notes

Revision ID: f236f58e0e17
Revises: 
Create Date: 2025-05-17 13:08:55.159409

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'f236f58e0e17'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('sms_verifications',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('phone_number', sa.String(), nullable=False),
    sa.Column('code', sa.String(), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('is_used', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('sms_verifications', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_sms_verifications_phone_number'), ['phone_number'], unique=False)

    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('phone_number', sa.String(), nullable=False),
    sa.Column('full_name', sa.String(), nullable=True),
    sa.Column('role', sa.Enum('PASSENGER', 'DRIVER', 'ADMIN', name='userrole'), nullable=False),
    sa.Column('status', sa.Enum('PENDING_SMS_VERIFICATION', 'PENDING_PROFILE_COMPLETION', 'ACTIVE', 'BLOCKED', name='userstatus'), nullable=False),
    sa.Column('admin_verification_notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_phone_number'), ['phone_number'], unique=True)

    op.create_table('cars',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('driver_id', sa.UUID(), nullable=False),
    sa.Column('make', sa.String(), nullable=False),
    sa.Column('model', sa.String(), nullable=False),
    sa.Column('license_plate', sa.String(), nullable=False),
    sa.Column('color', sa.String(), nullable=False),
    sa.Column('seats_count', sa.Integer(), nullable=False),
    sa.Column('verification_status', sa.Enum('PENDING_VERIFICATION', 'APPROVED', 'REJECTED', name='carverificationstatus'), nullable=False),
    sa.Column('admin_verification_notes', sa.Text(), nullable=True),
    sa.Column('is_default', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['driver_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('cars', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_cars_license_plate'), ['license_plate'], unique=True)

    op.create_table('trips',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('driver_id', sa.UUID(), nullable=True),
    sa.Column('car_id', sa.UUID(), nullable=True),
    sa.Column('from_location_text', sa.String(), nullable=False),
    sa.Column('to_location_text', sa.String(), nullable=False),
    sa.Column('departure_datetime', sa.DateTime(), nullable=False),
    sa.Column('estimated_arrival_datetime', sa.DateTime(), nullable=True),
    sa.Column('price_per_seat', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('total_seats_offered', sa.Integer(), nullable=False),
    sa.Column('available_seats', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('SCHEDULED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED_BY_DRIVER', 'FULL', name='tripstatus'), nullable=False),
    sa.Column('additional_info', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['car_id'], ['cars.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['driver_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('bookings',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('trip_id', sa.UUID(), nullable=False),
    sa.Column('passenger_id', sa.UUID(), nullable=False),
    sa.Column('seats_booked', sa.Integer(), nullable=False),
    sa.Column('total_price', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('status', sa.Enum('CONFIRMED', 'CANCELLED_BY_PASSENGER', 'CANCELLED_BY_DRIVER', name='bookingstatus'), nullable=False),
    sa.Column('booking_time', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['passenger_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['trip_id'], ['trips.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('bookings')
    op.drop_table('trips')
    with op.batch_alter_table('cars', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_cars_license_plate'))

    op.drop_table('cars')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_phone_number'))

    op.drop_table('users')
    with op.batch_alter_table('sms_verifications', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_sms_verifications_phone_number'))

    op.drop_table('sms_verifications')
    # ### end Alembic commands ###
